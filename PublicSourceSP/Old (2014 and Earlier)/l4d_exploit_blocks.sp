
#pragma semicolon 1

#include <sourcemod>
#include <colors>
#include <geoip>

public Plugin:myinfo =
{
	name = "L4D Exploit Blocks",
	author = "Don, Sir",
	description = "Kicks clients who enable the thirdpersonshoulder mode, abuse lag compensation or abuse Valve's free mathack",
	version = "1.4",
	url = ""
}

public APLRes:AskPluginLoad2(Handle:myself, bool:late, String:error[], err_max)
{
	decl String:sGame[12];
	GetGameFolderName(sGame, sizeof(sGame));
	if (StrEqual(sGame, "left4dead") || StrEqual(sGame, "left4dead2"))	/* Only load the plugin if the server is running Left 4 Dead or Left 4 Dead 2.
	* Loading the plugin on Counter-Strike: Source or Team Fortress 2 would cause all clients to get kicked,
	* because the thirdpersonshoulder mode and the corresponding ConVar that we check do not exist there.
	*/
	{
		return APLRes_Success;
	}
	else
	{
		strcopy(error, err_max, "Plugin only supports L4D1/2");
		return APLRes_Failure;
	}
}

public OnPluginStart()
{
	CreateTimer(GetRandomFloat(2.5, 3.5), CheckClients, _, TIMER_REPEAT);
}

public Action:CheckClients(Handle:timer)
{
	for (new iClientIndex = 1; iClientIndex <= MaxClients; iClientIndex++)
	{
		if (IsClientInGame(iClientIndex) && !IsFakeClient(iClientIndex))
		{
			if (GetClientTeam(iClientIndex) == 2 || GetClientTeam(iClientIndex) == 3)	// Only query clients on survivor or infected team, ignore spectators.
			{
				QueryClientConVar(iClientIndex, "c_thirdpersonshoulder", QueryClientThirdPerson);
				QueryClientConVar(iClientIndex, "cl_lagcompensation", QueryClientLagComp);
			}

			// Query on everyone as this can be transfered onto players after spectating.
			QueryClientConVar(iClientIndex, "mat_texture_list", ClientQueryCallback);
		}
	}	
}

public QueryClientThirdPerson(QueryCookie:cookie, client, ConVarQueryResult:result, const String:cvarName[], const String:cvarValue[])
{
	if (IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		if (result != ConVarQuery_Okay)		/* If the ConVar was somehow not found on the client, is not valid or is protected, kick the client.
		* The ConVar should always be readable unless the client is trying to prevent it from being read out.
		*/
		{
			new String:sName[MAX_NAME_LENGTH];
			GetClientName(client, sName, sizeof(sName));
			KickClient(client, "Kicked for potentially using thirdpersonshoulder mode.\nConVar c_thirdpersonshoulder not found, not valid or protected");
			LogAction(0, client, "Kicked \"%L\" for potentially using thirdpersonshoulder mode, ConVar c_thirdpersonshoulder not found, not valid or protected", client);
			PrintToChatAll("[SM] Kicked %s for potentially using thirdpersonshoulder mode, ConVar c_thirdpersonshoulder not found, not valid or protected", sName);
		}
		else if (!StrEqual(cvarValue, "false") && !StrEqual(cvarValue, "0"))	/* If the ConVar was found on the client, but is not set to either "false" or "0",
		* swap the client to spec, as he might be using thirdpersonshoulder.
		*/
		{
			new String:sName[MAX_NAME_LENGTH];
			GetClientName(client, sName, sizeof(sName));
			ChangeClientTeam(client, 1);
			CPrintToChatAll("{default}<{blue}SM{default}> {olive}%s {default}has been switched to Spectators for using {blue}thirdpersonshoulder", sName);
			CPrintToChat(client, "{default}<{blue}SM{default}> Open Console and type in: {olive}firstperson");
		}
	}
}

public QueryClientLagComp(QueryCookie:cookie, client, ConVarQueryResult:result, const String:cvarName[], const String:cvarValue[])
{
	if (IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		new lagcomp = StringToInt(cvarValue);
		if (result != ConVarQuery_Okay)		/* If the ConVar was somehow not found on the client, is not valid or is protected, kick the client.
		* The ConVar should always be readable unless the client is trying to prevent it from being read out.
		*/
		{
			new String:sName[MAX_NAME_LENGTH];
			GetClientName(client, sName, sizeof(sName));
			KickClient(client, "Kicked for potentially abusing lagcompensation.\nConVar cl_lagcompensation not found, not valid or protected");
			LogAction(0, client, "Kicked \"%L\" for potentially abusing lagcompensation, ConVar cl_lagcompensation not found, not valid or protected", client);
			PrintToChatAll("[SM] Kicked %s for potentially abusing lagcompensation, cl_lagcompensation not found, not valid or protected", sName);
		}
		else if (!StrEqual(cvarValue, "false") && lagcomp < 1)	/* If the ConVar was found on the client, but is not set to "1" or higher.
		* swap client to spectator, as he's likely to be abusing lagcompensation
		*/
		{
			new String:sName[MAX_NAME_LENGTH];
			GetClientName(client, sName, sizeof(sName));
			ChangeClientTeam(client, 1);
			CPrintToChatAll("{default}<{blue}SM{default}> {olive}%s {default}has been switched to Spectators for abusing {blue}lagcompensation", sName);
			CPrintToChat(client, "{default}<{blue}SM{default}> Open Console and type in: {olive}cl_lagcompensation 1");
		}
	}
}

public ClientQueryCallback(QueryCookie:cookie, client, ConVarQueryResult:result, const String:cvarName[], const String:cvarValue[])
{
	switch (result)
	{
		case 0:
		{
			new mathax = StringToInt(cvarValue);
			if (mathax > 0)
			{
				decl String:t_name[MAX_NAME_LENGTH], String:t_ip[32], String:t_steamid[32], String:path[256];
				//gets client name
				GetClientName(client,t_name,31);
				//gets steam id
				GetClientAuthString(client,t_steamid,31);
				//checks to see if client is conncted -  also checks to see if client is a bot
				if(IsFakeClient(client)) return;  
				//gets clients ip	
				GetClientIP(client,t_ip,31);
				
				new String:country[45];
				
				if(!GeoipCountry(t_ip, country, sizeof(country)) ) // Search country by IP, fail if not found. 
				{ 
					Format(country, sizeof(country), "unknown"); 
				}
				
				BuildPath(Path_SM, path, 256, "logs/mathack_cheaters.txt");
				LogToFile(path,".:[Name: %s | STEAMID: %s | IP: %s | Country: %s]:.",t_name,t_steamid,t_ip,country);
				PrintToChatAll("\x04[\x01Mathack Detector\x04] \x03%s \x01has been kicked and logged.", t_name);
				KickClient(client, "You have been kicked for attempting to use Mathacks");
			}
		}
		case 1:
		{
			KickClient(client, "ConVarQuery_NotFound");
		}
		case 2:
		{
			KickClient(client, "ConVarQuery_NotValid");
		}
		case 3:
		{
			KickClient(client, "ConVarQuery_Protected");
		}
	}
}
